{"version":3,"sources":["components/CircleSelector.jsx","components/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","react_default","a","createElement","className","selected","onClick","oneHandleClick","twoHandleClick","threeHandleClick","fourHandleClick","Circles","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","console","log","setState","state","src_components_CircleSelector","src_components_Circles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAceA,eAXQ,SAACC,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAgC,IAAnBJ,EAAMK,SAAiB,YAAc,GAAIC,QAASN,EAAMO,gBAA7E,mBACAN,EAAAC,EAAAC,cAAA,UAAQC,UAAgC,IAAnBJ,EAAMK,SAAiB,WAAa,GAAIC,QAASN,EAAMQ,gBAA5E,mBACAP,EAAAC,EAAAC,cAAA,UAAQC,UAAgC,IAAnBJ,EAAMK,SAAiB,WAAa,GAAIC,QAASN,EAAMS,kBAA5E,mBACAR,EAAAC,EAAAC,cAAA,UAAQC,UAAgC,IAAnBJ,EAAMK,SAAiB,WAAa,GAAIC,QAASN,EAAMU,iBAA5E,sBCKGC,SAXC,SAACX,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAA+B,IAAnBJ,EAAMK,SAAiB,YAAc,KAAtD,MACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAA+B,IAAnBJ,EAAMK,SAAiB,YAAc,KAAtD,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAA+B,IAAnBJ,EAAMK,SAAiB,YAAc,KAAtD,KACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAA+B,IAAnBJ,EAAMK,SAAiB,YAAc,KAAtD,QCkDGO,cArDb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAMRO,eAAiB,SAACa,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,KACZV,EAAKW,SAAS,CACZnB,SAAU,KAXKQ,EAenBL,eAAiB,SAACY,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,KACZV,EAAKW,SAAS,CACZnB,SAAU,KAnBKQ,EAsBnBJ,iBAAmB,SAACW,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,KACZV,EAAKW,SAAS,CACZnB,SAAU,KA1BKQ,EA6BnBH,gBAAkB,SAACU,GACjBA,EAAEC,iBACFC,QAAQC,IAAI,KACZV,EAAKW,SAAS,CACZnB,SAAU,KA/BZQ,EAAKY,MAAQ,CACXpB,SAAU,GAHKQ,wEAqCjB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,wBACAH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuB,EAAD,CAAgBrB,SAAUW,KAAKS,MAAMpB,SACrBE,eAAgBS,KAAKT,eACrBC,eAAgBQ,KAAKR,eACrBC,iBAAkBO,KAAKP,iBACvBC,gBAAiBM,KAAKN,kBACtCT,EAAAC,EAAAC,cAACwB,EAAD,CAAStB,SAAUW,KAAKS,MAAMpB,oBA/CtBuB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.242831f4.chunk.js","sourcesContent":["import React from 'react';\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => {\n    return (\n        <div className=\"CircleSelector\">\n            <button className= { props.selected === 1 ? \"selected \" : \"\"} onClick={props.oneHandleClick}>Select Circle 1</button>\n            <button className= { props.selected === 2 ? \"selected\" : \"\"} onClick={props.twoHandleClick}>Select Circle 2</button>\n            <button className= { props.selected === 3 ? \"selected\" : \"\"} onClick={props.threeHandleClick}>Select Circle 3</button>\n            <button className= { props.selected === 4 ? \"selected\" : \"\"} onClick={props.fourHandleClick}>Select Circle 4</button>\n        </div>\n    );\n}\n\nexport default CircleSelector;\n","import React from 'react';\nimport './Circles.css'\n\nconst Circles = (props) => {\n    return (\n        <div className=\"Circles\">\n            <div className={ props.selected === 1 ? \"selected \" : \" \"} >1 </div>\n            <div className={ props.selected === 2 ? \"selected \" : \" \"}>2</div>\n            <div className={ props.selected === 3 ? \"selected \" : \" \"}>3</div>\n            <div className={ props.selected === 4 ? \"selected \" : \" \"}>4</div>\n        </div>\n    );\n}\n\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector';\nimport Circles from './components/Circles';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: 1\n    }\n  }\n\n  oneHandleClick = (e) => {\n    e.preventDefault();\n    console.log('1');\n    this.setState({\n      selected: 1\n    })\n  }\n \n  twoHandleClick = (e) => {\n    e.preventDefault();\n    console.log('2');\n    this.setState({\n      selected: 2\n    })\n  }\n  threeHandleClick = (e) => {\n    e.preventDefault();\n    console.log('3');\n    this.setState({\n      selected: 3\n    })\n  }\n  fourHandleClick = (e) => {\n    e.preventDefault();\n    console.log('4');\n    this.setState({\n      selected: 4\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">PROJECT 4 ASSESSMENT</header>\n        <main>\n          <CircleSelector selected={this.state.selected}\n                          oneHandleClick={this.oneHandleClick}\n                          twoHandleClick={this.twoHandleClick}\n                          threeHandleClick={this.threeHandleClick}\n                          fourHandleClick={this.fourHandleClick}/>\n          <Circles selected={this.state.selected}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}